package com.hashedin.financialgoal.controller;

import java.security.Key;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hashedin.financialgoal.dto.FinancialGoalDto;

import com.hashedin.financialgoal.service.IFinancialGoalService;
import com.hashedin.financialgoal.utility.ResponseModel;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/goal")
public class FinancialGoalRepository {

	@Autowired
	private IFinancialGoalService financialGoalService;

	@PostMapping("/create")
	public ResponseEntity<ResponseModel> saveGoal(@RequestBody FinancialGoalDto goalDto) {
	    return financialGoalService.saveGoal(goalDto);
	}

    @DeleteMapping("/delete/{goalId}")
    public ResponseEntity<ResponseModel> deleteFinancialGoal(@PathVariable int goalId) {
        return financialGoalService.deleteFinancialGoal(goalId);
    }

    @GetMapping("/all")
    public ResponseEntity<ResponseModel> getAllFinancialGoals() {
        return financialGoalService.getAllFinancialGoals();
    }

    @PutMapping("/update/{goalId}")
    public ResponseEntity<ResponseModel> updateFinancialGoal(@PathVariable int goalId, @Valid @RequestBody FinancialGoalDto financialGoalDto) {
        return financialGoalService.updateFinancialGoal(goalId, financialGoalDto);
    }
	
    private static final String SECRET = "5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437";

    
	@SuppressWarnings("unchecked")
	public static List<String> extractRolesFromJwt(String jwtToken) throws JwtException {
        Key key = Keys.hmacShaKeyFor(SECRET.getBytes());
        Claims claims = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jwtToken).getBody();
        return claims.get("roles", List.class);
    }

    @GetMapping("/role")
    public String test(@RequestHeader(name =   "Authorization") String jwtToken) {
        try {
            List<String> userRoles = extractRolesFromJwt(jwtToken);
            // Log or process the user roles
            System.out.println("User Roles: " + userRoles);
            return "Success";
        } catch (JwtException e) {
            // Handle JWT parsing exception
            return "Error: " + e.getMessage();
        }
    }

}
